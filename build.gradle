plugins {
    id 'application'
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

version = '1.0'

tasks.named('shadowJar') {
    enabled = false
}

// Create a resolvable configuration just for running microbot
configurations {
    microbotRuntime {
        canBeConsumed = false
        canBeResolved = true
    }

    pluginShadowClasspath {
        extendsFrom runtimeClasspath
        exclude group: 'net.runelite', module: 'microbot'
    }
}

repositories {
    maven {
        url = 'https://nexus.microbot.cloud/repository/microbot-nightly/'
    }
    mavenCentral()
}

dependencies {
    compileOnly 'com.microbot:client:1.9.6.1'
    microbotRuntime 'com.microbot:client:1.9.6.1'
    implementation 'com.google.guava:guava:33.2.0-jre'
}

application {
    // Replace this with the actual main class inside your shaded jar
    mainClass = 'net.runelite.client.RuneLite'
}

def pluginsDir = file('src/main/java/com/microbot/plugins')
def pluginDirs = pluginsDir.listFiles()?.findAll { it.isDirectory() } ?: []

println "Detected plugins: " + pluginDirs*.name

def pluginsProperty = project.findProperty("pluginList")
def selectedPlugins = pluginsProperty ? pluginsProperty.split(',').collect { it.trim() } : []

// Create a sourceSet + ShadowJar per plugin
pluginDirs.each { dir ->
    def pluginName = dir.name

    if (selectedPlugins && !selectedPlugins.contains(pluginName)) {
        println "Skipping plugin: $pluginName"
        return
    }

    // Create a sourceset for each plugin
    def ss = sourceSets.create(pluginName) {
        java.srcDir dir
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    // Create a ShadowJar task for each plugin
    def jarTask = tasks.register("${pluginName}Jar", ShadowJar) {
        archiveBaseName.set(pluginName)
        archiveVersion.set('')          // => pluginName.jar
        archiveClassifier.set('')       // no -all
        from ss.output
        configurations = [project.configurations.pluginShadowClasspath]
        destinationDirectory.set(layout.buildDirectory.dir("libs"))

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        // Exclude module-info.class entirely (you don't need modules for plugins)
        exclude 'module-info.class'
        exclude 'META-INF/versions/**'
        outputs.upToDateWhen { false } // Always run
    }

    def copyTask = tasks.register("copy${pluginName}ToMicrobot", Copy) {
        dependsOn(jarTask)
        from(jarTask.flatMap { it.archiveFile })   // never hardcode build/libs/...
        into("${System.properties['user.home']}/.runelite/microbot-plugins")
        rename { "${pluginName}.jar" }             // optional
        outputs.upToDateWhen { false } // Always run
    }

    tasks.register('runMicrobot', Exec) {
        dependsOn(copyTask)

        if (pluginsProperty) {
            println 'Running  ' + configurations.microbotRuntime.singleFile
            commandLine 'java', '-jar', configurations.microbotRuntime.singleFile, "--plugins=${pluginsProperty}"
        } else {
            println 'Running  ' + configurations.microbotRuntime.singleFile
            commandLine 'java', '-jar', configurations.microbotRuntime.singleFile
        }
    }


    // Only make build depend on it if you want it to always run
    tasks.named("build") {
        dependsOn(jarTask)                         // always build the jar
        dependsOn(copyTask)
        dependsOn(runMicrobot)
    }
}