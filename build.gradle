plugins {
    id 'application'
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'

}

def isCI = System.getenv("CI")?.toBoolean() ?: false

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import groovy.json.JsonSlurper

apply from: 'generate-plugins.gradle'

version = '1.0'

tasks.named('shadowJar') {
    enabled = false
}

// Create a resolvable configuration just for running microbot
configurations {
    microbotRuntime {
        canBeConsumed = false
        canBeResolved = true
    }

    pluginShadowClasspath {
        extendsFrom runtimeClasspath
        exclude group: 'net.runelite', module: 'microbot'
    }
}

repositories {
    maven {
        url = 'https://nexus.microbot.cloud/repository/microbot-nightly/'
    }
    mavenCentral()
}

dependencies {
    compileOnly 'com.microbot:client:1.9.6.1'
    microbotRuntime 'com.microbot:client:1.9.6.1'
}

application {
    // Replace this with the actual main class inside your shaded jar
    mainClass = 'net.runelite.client.RuneLite'
}

def static pluginVersionFromPluginJson(File pluginDir) {
    def pluginJson = new File(pluginDir, "plugin.json")
    if (!pluginJson.exists()) return "0.0.1"
    def json = new JsonSlurper().parseText(pluginJson.text)
    return json.version ?: "0.0.1"
}


// Plugin Logic

def pluginsDir = file('src/main/java/com/microbot/plugins')
def pluginDirs = pluginsDir.listFiles()?.findAll { it.isDirectory() } ?: []

println "Detected plugins: " + pluginDirs*.name

def pluginsProperty = project.findProperty("pluginList")
def selectedPlugins = pluginsProperty ? pluginsProperty.split(',' as Closure).collect { it.trim() } : []

// Create a sourceSet + ShadowJar per plugin
pluginDirs.each { dir ->
    def pluginName = dir.name

    if (selectedPlugins && !selectedPlugins.contains(pluginName)) {
        println "Skipping plugin: $pluginName"
        return
    }

    // Create a dependencySet for each plugin
    def pluginConfigName = "${pluginName}ShadowDeps"
    configurations.create(pluginConfigName) {
        extendsFrom configurations.pluginShadowClasspath
    }

    def depsFile = new File(dir as File, "dependencies.txt")
    if (depsFile.exists()) {
        depsFile.readLines().each { dep ->
            println("dep " + dep.trim())
            dependencies.add(pluginConfigName, dep.trim())
        }
    }

    // Create a sourceset for each plugin
    def ss = sourceSets.create(pluginName) {
        java.srcDir dir
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    // Create a ShadowJar task for each plugin
    def jarTask = tasks.register("${pluginName}Jar", ShadowJar) {
        archiveBaseName.set(pluginName)
        archiveVersion.set(pluginVersionFromPluginJson(dir as File))          // => pluginName.jar
        archiveClassifier.set('')       // no -all
        from ss.output
        // configurations = [project.configurations.pluginShadowClasspath]
        //noinspection ConfigurationAvoidance
        configurations = [project.configurations.getByName(pluginConfigName)]
        destinationDirectory.set(layout.buildDirectory.dir("libs"))

        //Disable timestamp preservation
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        // Exclude module-info.class entirely (you don't need modules for plugins)
        exclude 'module-info.class'
        exclude 'META-INF/versions/**'
        exclude '**/plugin.json'
        exclude '**/plugins.json'
        outputs.upToDateWhen { false } // Always run
    }

    def copyTask = tasks.register("copy${pluginName}ToMicrobot", Copy) {
        dependsOn(jarTask)
        from(jarTask.flatMap { it.archiveFile })   // never hardcode build/libs/...
        into("${System.properties['user.home']}/.runelite/microbot-plugins")
        outputs.upToDateWhen { false } // Always run
    }

    jarTask.configure {
        dependsOn("generatePluginsJson")
        from("$buildDir/generated/resources/plugins.json") {
            into("/")
            rename { "plugins.json" }
        }
    }

    afterEvaluate {
        publishing {
            publications {
                create("${pluginName}Publication", MavenPublication) {
                    groupId = "com.microbot.plugins"
                    artifactId = pluginName.toLowerCase()
                    version = pluginVersionFromPluginJson(dir as File)

                    artifact(tasks.named("${pluginName}Jar").get().archiveFile) {
                        extension "jar"
                    }
                }
            }

            repositories {
                maven {
                    name = "microbot-plugins"
                    url = uri("https://nexus.microbot.cloud/repository/microbot-plugins/")
                    credentials {
                        username = project.findProperty("nexusUsername") ?: ""
                        password = project.findProperty("nexusPassword") ?: ""
                    }
                }
            }
        }
    }

    // Only make build depend on it if you want it to always run
    tasks.named("build") {
        dependsOn(jarTask)
        if (!isCI) {
            dependsOn(copyTask)
            dependsOn("runMicrobot")
        }
    }
}

tasks.register("runMicrobot", Exec) {
    if (pluginsProperty) {
        commandLine 'java', '-jar', configurations.microbotRuntime.singleFile, "--plugins=${pluginsProperty}"
    } else {
        commandLine 'java', '-jar', configurations.microbotRuntime.singleFile
    }
}